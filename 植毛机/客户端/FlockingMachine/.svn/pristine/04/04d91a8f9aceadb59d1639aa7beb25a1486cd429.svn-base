package com.sansan.toothbrush.machine.service;

import java.io.IOException;
import java.io.InputStream;
import java.net.Socket;
import java.net.UnknownHostException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Map;

import javax.transaction.Transactional;

import net.sf.json.JSONObject;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;

import com.sansan.toothbrush.machine.base.ApiResponse;
import com.sansan.toothbrush.machine.entity.PackProductionData;
import com.sansan.toothbrush.machine.entity.ProductionData;
import com.sansan.toothbrush.machine.entity.req.PackProductionDataHistoryReq;
import com.sansan.toothbrush.machine.entity.resp.ProductionDataResp;
import com.sansan.toothbrush.machine.repository.ProductionDataRepository;

@Service
public class ProductionDataServices {
	
	@Autowired
	private ProductionDataRepository repository;
	
	@Autowired
	private JdbcTemplate jdbcTemplate;
	
	@Transactional(rollbackOn=Exception.class)
	public void save() {
		//查询所有端口号
		String sql = "select id,ip,port from ss_connect_info";
		List<Map<String, Object>> address = jdbcTemplate.queryForList(sql);
		//创建生产数据对象
		ProductionData Prodata = null;
		ProductionData SelectProdata = null;//创建生产数据查询对象
		//遍历地址list对象
		for(Map<String, Object> as : address){
			
			//获取指定地址的id
			Integer connect_Info_id = 0;
			connect_Info_id =  as.get("id") == null || as.get("id") == "" ? 0 : Integer.valueOf(as.get("id").toString());
			Calendar cal=Calendar.getInstance();    
			int y=cal.get(Calendar.YEAR);    
			int m=cal.get(Calendar.MONTH)+1;    
			int d=cal.get(Calendar.DATE);
			String month = m+"";
			String day = d+"";
			if(m < 10) {
				month = "0"+m;
			}
			if(d < 10) {
				day = "0"+d;
			}
			String date = y+"-"+month+"-"+day;
			
			//通过连接信息id查询该IP地址当天是否已存在数据
			SelectProdata = repository.findFlockingProduction_data_id(connect_Info_id,date);
			
			Prodata = new ProductionData();
			JSONObject json = null;
			try {
				json = getPorductionData(as.get("ip").toString(),Integer.parseInt(as.get("port").toString()));
			} catch (NumberFormatException | IOException e) {
				
				//e.printStackTrace();
				//一旦连接异常，不对数据进行操作
				if(SelectProdata != null) {
					repository.updateState("未连接", SelectProdata.getId());
					System.out.println("连接失败！机器未连接或端口号，ip地址错误！请检查局域网是否畅通或端口号，ip地址是否正确！");
			        continue;
				}
				//如果没有该数据仍对数据进行添加，但所有数据为0
				Prodata.setName(connect_Info_id+"号机器");//机器名称
				Prodata.setConnectInfoId(connect_Info_id);//绑定连接信息id
				Prodata.setOk(0);//合格
		        Prodata.setNg(0);//不合格
		        Prodata.setTotal(0);//总数
		        // 0 暂停 1 运行 2 未连接
		        Prodata.setState("未连接");
		        Prodata.setOweHole(0);//欠孔
		        Prodata.setLongHair(0);//长毛
		        Prodata.setLongShortHair(0);//长短毛
		        Prodata.setLooseWool(0);//散毛
		        Prodata.setImplantationError(0);//植错毛
		        Prodata.setDifferenceHair(0);//差毛
		        Prodata.setDirty(0);//脏毛
		        Prodata.setCreateTime(new Timestamp(System.currentTimeMillis()));
		        repository.save(Prodata);
				System.out.println("连接失败！机器未连接或端口号，ip地址错误！请检查局域网是否畅通或端口号，ip地址是否正确！");
				continue;
			}
			if(json == null) {
				System.out.println("json对象为 null,未获取到数据！");
				continue;
			}
			//查询生产数据id 等于 production_data_id的数据
			//获取

			//如果当天存在数据则对数据进行修改
			String state = null;
			if(SelectProdata != null) {
				 // 0 暂停 1 运行 2 未连接
				if(json.getInt("State") == 0) {
		        	state = "暂停";
		        } else if(json.getInt("State") == 1) {
		        	state = "运行";
		        }
				//判断是否为空，防止未连接时存在对象但是开始时间为空
				if(SelectProdata.getStartTime() == null) {
					repository.updateStart_time(new Timestamp(System.currentTimeMillis()),SelectProdata.getId());
				}
				repository.update(connect_Info_id+"号机器", 
						connect_Info_id, SelectProdata.getOk()+json.getInt("OK"),
						SelectProdata.getNg()+json.getInt("NG"), 
						SelectProdata.getTotal()+(json.getInt("OK")+json.getInt("NG")), 
						state, 
						SelectProdata.getOweHole()+json.getInt("Hole"),
						SelectProdata.getLongHair()+json.getInt("LongHair"),
						SelectProdata.getLongShortHair()+json.getInt("UnevenHair"),
						SelectProdata.getLooseWool()+json.getInt("LooseHair"),
						SelectProdata.getImplantationError()+json.getInt("WrongHair"),
						SelectProdata.getDifferenceHair()+json.getInt("CrushHair"),
						SelectProdata.getDirty()+json.getInt("Dirt"),
						new Timestamp(System.currentTimeMillis()),
						SelectProdata.getId());
		        continue;
			}
			//否则因为当天不存在id修改将变成添加
			Prodata.setName(connect_Info_id+"号机器");//机器名称
			Prodata.setConnectInfoId(connect_Info_id);//绑定连接信息id
			Prodata.setOk(json.getInt("OK"));//合格
	        Prodata.setNg(json.getInt("NG"));//不合格
	        Prodata.setTotal((json.getInt("OK")+json.getInt("NG")));//总数
	        // 0 暂停 1 运行 2 未连接
	        if(json.getInt("State") == 0) {
	        	Prodata.setState("暂停");
	        } else if(json.getInt("State") == 1) {
	        	Prodata.setState("运行");
	        }
	        Prodata.setOweHole(json.getInt("Hole"));//欠孔
	        Prodata.setLongHair(json.getInt("LongHair"));//长毛
	        Prodata.setLongShortHair(json.getInt("UnevenHair"));//长短毛
	        Prodata.setLooseWool(json.getInt("LooseHair"));//散毛
	        Prodata.setImplantationError(json.getInt("WrongHair"));//植错毛
	        Prodata.setDifferenceHair(json.getInt("CrushHair"));//差毛
	        Prodata.setDirty(json.getInt("Dirt"));//脏毛
	        Prodata.setStartTime(new Timestamp(System.currentTimeMillis()));
	        Prodata.setStartTime(new Timestamp(System.currentTimeMillis()));
	        Prodata.setCreateTime(new Timestamp(System.currentTimeMillis()));
	        repository.save(Prodata);
	        
	        /*Prodata.setStartTime(json.get(""));//软件启动时间
	        Prodata.setEndTime(json.getInt(""));//软件关闭时间
*/
		}
	}
	
	//查询所有信息
	public ApiResponse findAll() {
		Calendar cal=Calendar.getInstance();    
		int y=cal.get(Calendar.YEAR);    
		int m=cal.get(Calendar.MONTH)+1;    
		int d=cal.get(Calendar.DATE);
		String month = m+"";
		String day = d+"";
		if(m < 10) {
			month = "0"+m;
		}
		if(d < 10) {
			day = "0"+d;
		}
		String date = y+"-"+month+"-"+day;
		String sql = "SELECT name,ok,ng,total,run_time,state,owe_hole,long_hair,loose_wool,long_short_hair,implantation_error,difference_hair,dirty,start_time,end_time FROM ss_production_data Pdata where create_time like '%"+date+"%'";
		
		List<Map<String, Object>> list =  jdbcTemplate.queryForList(sql);
		List<ProductionDataResp> resps = new ArrayList<>();
		ProductionDataResp resp = null;
		String start_time = null;
		String end_time = null;
		for(Map<String,Object> map: list) {
			start_time = map.get("start_time") == null || map.get("start_time") == "" ? "未连接" : map.get("start_time").toString();
			end_time = map.get("end_time") == null || map.get("end_time") == "" ? "未连接" : map.get("end_time").toString();
			if(map.get("state").toString().equals("未连接")) {
				start_time = "未连接";
				end_time = "未连接";
			}
			resp = new ProductionDataResp();
			resp.setName(map.get("name").toString());
			resp.setOk(map.get("ok").toString());
			resp.setNg(map.get("ng").toString());
			resp.setTotal(map.get("total").toString());
			resp.setState(map.get("state").toString());
			resp.setOweHole(map.get("owe_hole").toString());
			resp.setLongHair(map.get("long_hair").toString());
			resp.setLooseWool(map.get("loose_wool").toString());
			resp.setLongShortHair(map.get("long_short_hair").toString());
			resp.setImplantationError(map.get("implantation_error").toString());
			resp.setDifferenceHair(map.get("difference_hair").toString());
			resp.setDirty(map.get("dirty").toString());
			resp.setStartTime(start_time);
			resp.setEndTime(end_time);
			resps.add(resp);
		}
		return ApiResponse.ofSuccess(resps);
	}
	
	/**
	 * 植毛机历史记录功能
	 * 
	 * @param time
	 * @param req.getPage()
	 * @param limit
	 * @return 
	 */
	public ApiResponse findByPageHistory(PackProductionDataHistoryReq req) {
		String sql = null;
		if(req.getPage() == 0) {
			req.setPage(1);//设置页数默认值为1
		}
		if(req.getLimit() == 0) {
			req.setLimit(5);//设置一页默认显示5
		}
		
		//获取昨天的日期因为今天还未生成历史数据
		if(!StringUtils.isNotBlank(req.getTime())) {
			Calendar cal=Calendar.getInstance();    
			int y=cal.get(Calendar.YEAR);    
			int m=cal.get(Calendar.MONTH)+1;    
			int d=cal.get(Calendar.DATE)-1;//天数减一获取昨天日期
			String month = m+"";
			String day = d+"";
			if(m < 10) {
				month = "0"+m;
			}
			if(d < 10) {
				day = "0"+d;
			}
			req.setTime(y+"-"+month+"-"+day); //设置时间默认值为当天
		}
		if(StringUtils.isNotBlank(req.getTime())) {
			sql += " and create_time like '%"+req.getTime()+"%'";
		}
		sql = "select * from ss_production_data where create_time like '%"+req.getTime()+"%'  limit "+(req.getPage()-1)*req.getLimit()+","+req.getLimit();
		List<Map<String, Object>> list =  jdbcTemplate.queryForList(sql);
		List<ProductionDataResp> resps = new ArrayList<>();
		ProductionDataResp resp = null;
		for(Map<String,Object> map: list) {
			resp = new ProductionDataResp();
			resp.setName(map.get("name").toString());
			resp.setOk(map.get("ok").toString());
			resp.setNg(map.get("ng").toString());
			resp.setTotal(map.get("total").toString());
			resp.setRunTime(map.get("run_time").toString());
			if(map.get("state").toString() == "1") {
				resp.setState("启动");
			}
			if(map.get("state").toString() == "0") {
				resp.setState("关闭");
			}
			resp.setOweHole(map.get("owe_hole").toString());
			resp.setLongHair(map.get("long_hair").toString());
			resp.setLooseWool(map.get("loose_wool").toString());
			resp.setLongShortHair(map.get("long_short_hair").toString());
			resp.setImplantationError(map.get("implantation_error").toString());
			resp.setDifferenceHair(map.get("difference_hair").toString());
			resp.setDirty(map.get("dirty").toString());
			resp.setStartTime(map.get("start_time").toString());
			resp.setEndTime(map.get("end_time").toString());
			resps.add(resp);
		}
		return ApiResponse.ofSuccess(resps);
	}
	/**
	 * 使用socket从服务器获取数据 牙刷机植毛联网
	 * 
	 * @param ip ip地址
	 * @param port 端口号
	 * @return 返回json对象 参数格式：{"OK":"86","NG":"14","Total":"100","RunTime":"00:00:00"}
	 * @throws IOException 
	 * @throws UnknownHostException 
	 */
	public JSONObject getPorductionData(String ip,int port) throws UnknownHostException, IOException {
		Socket socket = null;
		InputStream in = null;
		socket = new Socket(ip, port);
		in = socket.getInputStream();
	
		
		byte[] data=new byte[1024];
        int len = 0;
		try {
			len = in.read(data);
		} catch (IOException e) {
			System.out.println("ProductionDataServices的save方法中的in.read(data)调用异常，异常原因："+e.getMessage());
			e.printStackTrace();
		}
		try {
			socket.close();
		} catch (IOException e) {
			
			e.printStackTrace();
		}
		return JSONObject.fromObject(new String(data,0,len));
	}
	
	/*//新的包装机保存方法
	@Transactional(rollbackOn=Exception.class)
	 public void NewPackSave() {
		 //要获取的参数有
			
			机器名称
			产品型号
			计划产量
			以上参数可由客户手动添加，因为无法从机器获取
			机器名称 写死的
			相机ng次数
			已完成量 = 监测次数 - 不良数
			未完成量 = 计划产量 - 已完成量
			
		//6.查询所有的socket 的IP地址，端口号，id，并生成连接信息集合 已完成
		String sql = "select id,ip,port from ss_connect_info";
		List<Map<String, Object>> address = jdbcTemplate.queryForList(sql);
		
		PackProductionData PackProdata = new PackProductionData();
		//7.遍历获取的连接信息集合 已完成
		for(Map<String, Object> as : address) {
			//
			Integer connect_Info_id = 0;
			connect_Info_id =  as.get("id") == null || as.get("id") == "" ? 0 : Integer.valueOf(as.get("id").toString());
			
			Calendar cal=Calendar.getInstance();    
			int y=cal.get(Calendar.YEAR);    
			int m=cal.get(Calendar.MONTH)+1;    
			int d=cal.get(Calendar.DATE);
			String date = y+":"+m+":"+d;
			//通过查询数据获取当天时间是否有与该id相关的未完成的数据 
			//条件1.连接信息表中的id 达成
			//条件2.当天的时间 达成
			//条件3.订单状态 达成 写在数据库语句中
			//select id from ss_production_data where connect_info_id = 1 and DATE_FORMAT(start_time,\"%Y-%m-%d\") =?2  and order_status = 0
			String proId = repository.findProduction_data_id(connect_Info_id,date);
			int production_data_id = proId == null || proId == "" ? 0 :Integer.parseInt(proId);
			//从socket获取数据
			
			PackProdata = getPackPorductionData(as.get("ip").toString(),Integer.parseInt(as.get("port").toString()));
			if(production_data_id > 0) {
				PackProdata.setId(production_data_id);
				sql = "select * from production_data";
				
				
				PackProdata.setVersionId(version_Id);
			}
			
			repository.save(PackProdata);
		}
		
	 }*/
	
	/**
	 * 包装机保存方法
	 *//*
	@Transactional(rollbackOn=Exception.class)
	public void PackSave() {
		String sql = "select ip,port from ss_connect_info";
		List<Map<String, Object>> address = jdbcTemplate.queryForList(sql);
		//创建生产数据对象
		PackProductionData Prodata = null;
		
		InputStream in = null;
		//遍历地址list对象
		for(Map<String, Object> as : address){
			
			//因为既然能进入for循环ip当前的ip地址一定存在，所以不再判断是否为空
			sql = "select id from ss_connect_info where ip = '"+as.get("ip")+"'";
			System.out.println(sql);
			//获取指定地址的id
			Integer connect_Info_id = jdbcTemplate.queryForObject(sql,Integer.class);
			

			Calendar cal=Calendar.getInstance();    
			int y=cal.get(Calendar.YEAR);    
			int m=cal.get(Calendar.MONTH)+1;    
			int d=cal.get(Calendar.DATE);
			//获取当天的日期
			String date = y+":"+m+":"+d;
			System.out.println(sql);
			//通过id查询该IP地址是否已存在数据
			int production_data_id = 0;
			String proId = repository.findProduction_data_id(connect_Info_id,date);
			production_data_id = proId == null || proId == "" ? 0 :Integer.parseInt(proId);
			
			//分割字符串获取数据
			Prodata = getPackPorductionData(as.get("ip").toString(),Integer.parseInt(as.get("port").toString()));
			//如果存在数据则对数据进行修改
			if(production_data_id > 0) {
		        Prodata.setId(production_data_id);
			}
			//否则因为不存在id修改将变成添加
			
	        repository.save(Prodata);
		}
	}*/
	/**
	 *  包装机
	 * @param ip
	 * @param port
	 * @return ProductionData 返回生产数据对象
	 */
	/**
	 * @param ip
	 * @param port
	 * @param machine_name
	 * @param version_id
	 * @return
	 */
	public PackProductionData getPackPorductionData(String ip,int port) {
		Socket socket = null;
		InputStream in = null;
		PackProductionData PackProData = new PackProductionData();
		try {
			socket = new Socket(ip, port);
			in = socket.getInputStream();
		} catch (UnknownHostException e) {
			// TODO Auto-generated catch block
			System.out.println("无法确定主机的ip地址！异常原因："+e.getMessage());
			e.printStackTrace();
		} catch (IOException e) {
			System.out.println("端口号错误或IO操作异常已中断！异常原因："+e.getMessage());
			e.printStackTrace();
		}
		
		byte[] data=new byte[1024];
		int len = 0;
		try {
			len = in.read(data);
		} catch (IOException e) {
			System.out.println("ProductionDataServices的save方法中的in.read(data)调用异常，异常原因："+e.getMessage());
			e.printStackTrace();
		}
		try {
			socket.close();
		} catch (IOException e) {
			
			e.printStackTrace();
		}
		//获取包装数据
		String PackData = new String(data,0,len);
		//对数据进行切割，并获取当前数据的数组
		
		//首先去掉,号
		char delStr = ',';
		//在对*号进行切割
		String[] PackDatas = deleteString2(PackData, delStr).split("\\*");
		int completedQuantity = 0;
		for(int i = 0; i < 2; i++) {
			//获取检测次数，也就是已完成量，假如检测是第一个
			if(i == 0) {
				completedQuantity = Integer.parseInt(PackDatas[i]);
				PackProData.setCompletedQuantity(completedQuantity);
			}
			
			//获取相机ng次数
			if(i == 1) {
				PackProData.setNgNumberCamera(Integer.parseInt(PackDatas[i]));
			}
		}
		
		return PackProData;
	}
	
	//去除指定的字符
	public static String deleteString2(String str, char delChar) {
        StringBuffer stringBuffer = new StringBuffer("");
        for (int i = 0; i < str.length(); i++) {
            if (str.charAt(i) != delChar) {
                stringBuffer.append(str.charAt(i));
            }
        }
        return stringBuffer.toString();
    }
	
}
