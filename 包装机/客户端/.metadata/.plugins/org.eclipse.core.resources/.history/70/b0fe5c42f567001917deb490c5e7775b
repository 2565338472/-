package com.sansan.toothbrush.machine.thread;

import java.io.IOException;
import java.io.InputStream;
import java.net.Socket;
import java.net.UnknownHostException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.transaction.Transactional;

import org.apache.commons.lang.StringUtils;
import org.hibernate.sql.Select;
import org.springframework.jdbc.core.JdbcTemplate;

import com.sansan.toothbrush.machine.entity.ExceedingProduction;
import com.sansan.toothbrush.machine.entity.PackProductionData;
import com.sansan.toothbrush.machine.repository.ExceedingProductionRepository;
import com.sansan.toothbrush.machine.repository.PackProductionDataRepository;


/**
 * @author Administrator
 * 保存数据的线程 暂时未启用，先保留如果需要再进行调用
 */
public class SaveDataThread extends Thread{

	private JdbcTemplate jdbcTemplate = null;
	private InputStream in;
	private Socket socket = null;
	private String ip = null;
	private int port = 0;
	private PackProductionDataRepository repository;
	private PackProductionData SelectProdata = null;
	private int previousOk = 0;//上一次的ok数
	private int previousTotal = 0;//上一次的总数
	private ExceedingProductionRepository EPRepository;
	Map<String, Object> as = null;
	PackProductionData PackProdata = null;
	
    public SaveDataThread(Map<String, Object> as,PackProductionDataRepository repository,JdbcTemplate jdbcTemplate,ExceedingProductionRepository EPRepository) throws UnknownHostException, IOException {
    	this.repository = repository;
        this.jdbcTemplate = jdbcTemplate;
        this.as = as;
        this.port = as.get("port") == null || as.get("port") == "" ? 0 : Integer.valueOf(as.get("port").toString());
        this.ip = as.get("ip") == null || as.get("ip") == "" ? "" : as.get("ip").toString();
        this.EPRepository = EPRepository;
        System.out.println("连接中...");
        socket = new Socket(this.ip, this.port);
        System.out.println("连接成功！");
        System.out.println("正在启动中,请稍后..");
        jdbcTemplate.update("update ss_connect_info set thread_state = 1 where id = "+as.get("id"));
    }
    /* (non-Javadoc)
     * @see java.lang.Thread#run()
     */
    @Transactional(rollbackOn=Exception.class)
    public synchronized void run() {
    	
    	System.out.println("启动成功！");
    	System.out.println("线程-" + Thread.currentThread().getId());
		System.out.println("IP地址:"+ip);
		System.out.println("端口号:"+port);
		
		while(true) {
			
			 Integer connect_Info_id =  as.get("id") == null || as.get("id") == "" ? 0 : Integer.valueOf(as.get("id").toString());
			 /*SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			
			 String date = sdf.format(System.currentTimeMillis());*/


			//通过连接信息id查询该IP地址当天是否已存在生产状态为未完成数据
			//这里应该改正一下，只需要查询指定机器生产状态未完成的数据，因为一台机器只能由一个订单为生产中
			//而因为前端页面进行了判断，如果未生产完成不允许修改，所以生产状态为生产中的订单一台机器只会有一个
			//所以不再查询当天时间而是获取该机器当前的生产状态。
			//SelectProdata = repository.findFlockingProduction_data_id(connect_Info_id,date);
			SelectProdata = repository.findFlockingProduction_data_id(connect_Info_id);
			//如果查询的数据不为空
			try {
				if(socket.getInputStream() == null) {
					continue;
				}
				in = socket.getInputStream();
			} catch (IOException e2) {
				// TODO Auto-generated catch block
				e2.printStackTrace();
			}
			try {
				socket.sendUrgentData(0xFF);
			} catch (IOException e1) {

				e1.printStackTrace();
			    socket = null;
			    jdbcTemplate.update("update ss_connect_info set thread_state = 0 where id = "+connect_Info_id);
			}
			byte[] data=new byte[1024];
	        int len = 0;
			try {
				len = in.read(data);
			} catch (IOException e) {
				jdbcTemplate.update("update ss_connect_info set thread_state = 0 where id = "+connect_Info_id);
				System.out.println("控制台：The in.read(data) data in the save method of ProductionDataServices failed to read! Reason for failure："+e.getMessage());
				e.printStackTrace();
			}
			//防止获取数据错误
			if(len == -1) {
				continue;
			}
			String str = new String(data,0,len);
			if(!StringUtils.isNotBlank(str)) {
				continue;
			}
			char delStr = ',';
			//在对*号进行切割
			String[] PackDatas = deleteString(new String(data,0,len), delStr).split("\\+");
			if(PackDatas.length == 0) {
				System.out.println("json对象为 null,未获取到数据！");
				continue;
			}
			
			//一共要获取两个个参数
			//1.ng数
			int ng = 0;
			//2.ok数
			int ok = 0;
			//3.总数
			int total = 0;
			//4.相机ng次数
			int cameraNgNumber = 0;
			//因为数据的格式为+0000000011,+0000000750,+0000000761,+0000000011
			//而我们是从+号开始分割，所以获取到的数据PackDatas[0]一定是空的
			for(int i = 0; i < 5; i++) {
				//所以在这里获取数据时是从PackDatas[1]开始
				if(i == 1) {
					ng = PackDatas[i] == null || PackDatas[i] == "" ? 0 : Integer.parseInt(PackDatas[i]);//获取并记录
				}
				if(i == 2) {
					ok = PackDatas[i] == null || PackDatas[i] == "" ? 0 : Integer.parseInt(PackDatas[i]);
				}
				if(i == 3) {
					total = PackDatas[i] == null || PackDatas[i] == "" ? 0 : Integer.parseInt(PackDatas[i]);
				}
				if(i == 4) {
					if(PackDatas[i].substring(0,PackDatas[i].length()-1) == "0000000000") {
						cameraNgNumber = 0;
						continue;
					} else {
						cameraNgNumber = PackDatas[i] == null || PackDatas[i] == "" ? 0 : Integer.parseInt(PackDatas[i].substring(0,PackDatas[i].length()-2));
					}
				}
			}
			String sql = null;
			//查询出超出产量表中指定机器的超出产量
			ExceedingProduction ep = EPRepository.findByConnectInfoId(connect_Info_id);
			int DatabaseExceedingProduction = 0;
			/*json = getPorductionData(as.get("ip").toString(),Integer.parseInt(as.get("port").toString()));*/
			//查询生产数据id 等于 production_data_id的数据
			synchronized (this) {
				//数据库语句字符串
				//如果当天存在数据则对数据进行修改
				if(SelectProdata != null) {
					
					if(ep == null) {
						ep = new ExceedingProduction();
						ep.setConnectInfoId(connect_Info_id);
						EPRepository.save(ep);
						DatabaseExceedingProduction = 0;
					}
					DatabaseExceedingProduction = ep.getExceedingProduction();//获取数据库中的超出产量
					//如果存在但是预计产量为0或，客户单号为空，型号为空，工单单号为空，不对数据进行操作
					if(SelectProdata.getScheduledProduction() == 0 
							|| (!StringUtils.isNotBlank(SelectProdata.getCustomerNumber()) 
							|| !StringUtils.isNotBlank(SelectProdata.getVersion()) 
							|| !StringUtils.isNotBlank(SelectProdata.getWorkOrderNumber()))) {
						//当用户没有填写预计产量等信息时，获取到未填写时的已完成量累计添加到超出产量数据表中
						
						int CompletedQuantity = total - previousTotal;//获取本次实际累计的已完成量
						if(0 <= CompletedQuantity) {
							DatabaseExceedingProduction += CompletedQuantity;//累计超出产量
							sql = "update ss_exceeding_production set exceeding_production = "+(DatabaseExceedingProduction)+" where connect_info_id = "+connect_Info_id;
							jdbcTemplate.update(sql);//修改超出产量并进行累计
						}
						previousTotal = total;
						continue;
					}
					
					/*//如果超出产量小于计划产量
					} else if(DatabaseExceedingProduction > 0 && DatabaseExceedingProduction < SelectProdata.getScheduledProduction()) {
						//如果超出产量加已完成量(总数)大于计划产量
						if(DatabaseExceedingProduction+ SelectProdata.getTotal() >= SelectProdata.getScheduledProduction()) {
							//修改已完成量等于计划产量
							sql = "update ss_production_data set total = "+SelectProdata.getScheduledProduction()+" where  connect_Info_id = "+SelectProdata.getId();
							jdbcTemplate.update(sql);
							//获取减少后的计划产量,并保存至数据库中
							if(DatabaseExceedingProduction+ SelectProdata.getTotal() > SelectProdata.getScheduledProduction()) {
								DatabaseExceedingProduction = (DatabaseExceedingProduction + SelectProdata.getTotal()) - SelectProdata.getScheduledProduction();
								sql = "update ss_exceeding_production set exceeding_production = "+DatabaseExceedingProduction+" where connect_info_id = "+connect_Info_id;
								jdbcTemplate.update(sql);//修改超出产量
							}
						} else {
							sql = "update ss_production_data set total = "+SelectProdata.getTotal()+DatabaseExceedingProduction+" where production_state = 0 and id = "+SelectProdata.getId();
							jdbcTemplate.update(sql);//修改已完成量
						}
						//自动提交
					//如果超出产量大于计划产量，并且计划产量大于已完成量
					} else if (DatabaseExceedingProduction > SelectProdata.getScheduledProduction() && SelectProdata.getScheduledProduction() > SelectProdata.getTotal()) {
						//超出产量等于超出产量减去计划产量
						DatabaseExceedingProduction = DatabaseExceedingProduction - SelectProdata.getScheduledProduction();
						//并将已完成量修改为计划产量
						sql = "update ss_production_data set total = "+SelectProdata.getScheduledProduction()+" where id = "+SelectProdata.getId();
						jdbcTemplate.update(sql);
						sql = "update ss_ss_exceeding_production set exceeding_production = "+DatabaseExceedingProduction+" where connect_info_id="+connect_Info_id;
						jdbcTemplate.update(sql);
						continue;
					}*/
					
					//为了防止前端页面刚改成已完成,线程又将数据改为未完成
					if(SelectProdata.getProductionState() == 2) {
						jdbcTemplate.update("update ss_production_data set production_state = 0 where id="+SelectProdata.getId());
					}
					//判断是否为空，防止未连接时存在对象但是开始时间为空
					if(SelectProdata.getStartTime() == null) {
						repository.updateStart_time(new Timestamp(System.currentTimeMillis()),SelectProdata.getId());
					}
					
					//如果已完成量大于计划产量则将多出的部分保存至数据库
					
					long CompletedQuantity = (SelectProdata.getTotal() + (total - previousTotal));//已完成量
					long ActualUnfinished = SelectProdata.getScheduledProduction() - CompletedQuantity;//未完成量
					//如果计划产量小于已完成量
					if(SelectProdata.getScheduledProduction() < CompletedQuantity) {
						long ExceedingProduction = CompletedQuantity - SelectProdata.getScheduledProduction();//获取超出产量
						sql = "update ss_exceeding_production set exceeding_production = "+ExceedingProduction+" where connect_info_id = "+connect_Info_id;
						jdbcTemplate.update(sql);//修改超出产量并进行累计
					}
					//当创建一个新的订单的时候，将超出产量清零并将超出产量放入已完成量中
					
					if(SelectProdata.getTotal() == 0) {
						
						//获取超出产量
						int ExceedingProduction = EPRepository.findExceedingProductionByConnectInfoId(connect_Info_id);
						//将已完成量修改为超出产量
						jdbcTemplate.update("update ss_production_data set total = "+ExceedingProduction+" where connect_info_id = "+connect_Info_id);
						//将超出产量清零
						jdbcTemplate.update("update ss_exceeding_production set exceeding_production = 0 where connect_info_id = "+connect_Info_id);
					}
					//如果实际未完成量小于等于0
					if(ActualUnfinished <= 0) {
						ActualUnfinished = 0;
					}
					//
					
					
					//
					SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");//设置日期格式
					
					
					sql = "update ss_production_data  set "
							+ "ok = "+(SelectProdata.getOk()+(ok - previousOk))+","
							//总数减去ok次数等于ng次数
							//通过(total - previousTotal)获取本次的实际总数
							//通过(ok - previousOk)获取本次的实际ok数
							//然后实际总数 减去 实际ok数等于实际ng数
							+ "ng = "+(SelectProdata.getNg()+((total - previousTotal) - (ok - previousOk)))+","
							//这里标注一下：总数相当于已完成量
							+ "total = "+(SelectProdata.getTotal() + (total - previousTotal))+","
							//相机ng次数相当于ng次数
							+ "ng_number_camera = "+(SelectProdata.getNgNumberCamera()+((total - previousTotal) - (ok - previousOk)))+","
							//这里标注一下：检测次数相当于总数
							//由于上一次的次数的至永远小于本次的次数所以不做判断
							+ "unfinished_amount = "+ActualUnfinished+","//通过计划产量减去总数获取未完成量
							+ "machine_state = '运行',"//
							+ "end_time = '"+df.format(new Date())+"'"
							+ "where id = "+SelectProdata.getId()+"";
					
					System.out.println(sql);
					int i = jdbcTemplate.update(sql);
					//记录这次数据为上次数据
					previousOk = ok;
					previousTotal = total;
					continue;
				}
				
				
				//如果计划产量,工单单号，产品型号，客户单号为空则不开始监控
				//如果为空同样创建数据，并初始化数据。
				
				PackProdata = new  PackProductionData();
				//否则因为不存在id修改将变成添加
				PackProdata.setMachineName(connect_Info_id+"号机器");//机器名称
				PackProdata.setConnectInfoId(connect_Info_id);//绑定连接信息id
				PackProdata.setOk(0);//合格
		        PackProdata.setNg(0);//不合格
		        PackProdata.setNgNumberCamera(0);
		        PackProdata.setTotal(0);//总数
		        // 0 暂停 1 运行 2 未连接 机器的运行状态
		        PackProdata.setMachineState("运行");
		        // 0 未完成 1 已完成 2 未开始 这里的未完成是指订单的完成状态
		        PackProdata.setProductionState(2);
		        PackProdata.setStartTime(new Timestamp(System.currentTimeMillis()));
		        PackProdata.setCreateTime(new Timestamp(System.currentTimeMillis()));
		        repository.save(PackProdata);
			}
		}
    }
    
	//去除指定的字符
	public static String deleteString(String str, char delChar) {
        StringBuffer stringBuffer = new StringBuffer("");
        for (int i = 0; i < str.length(); i++) {
            if (str.charAt(i) != delChar) {
                stringBuffer.append(str.charAt(i));
            }
        }
        return stringBuffer.toString();
    }
    public void save(String sql) {
    	String driver = "com.mysql.cj.jdbc.Driver";
	    String url = "jdbc:mysql://127.0.0.1:3306/hair_planting_machine?serverTimezone=GMT%2B8&characterEncoding=utf-8&useSSL=false&allowPublicKeyRetrieval=true";
	    String username = "root";
	    String password = "123456";
	    Connection conn = null;
	    try {
	        Class.forName(driver); //classLoader,加载对应驱动
	        conn = (Connection) DriverManager.getConnection(url, username, password);
	    } catch (ClassNotFoundException e) {
	        e.printStackTrace();
	    } catch (SQLException e) {
	        e.printStackTrace();
	    }
	    int i = 0;
	    PreparedStatement pstmt;
	    try {
	        pstmt = (PreparedStatement) conn.prepareStatement(sql);
	        i = pstmt.executeUpdate();
	        System.out.println("resutl: " + i);
	        pstmt.close();
	        conn.close();
	    } catch (SQLException e) {
	        e.printStackTrace();
	    }
    }
}
